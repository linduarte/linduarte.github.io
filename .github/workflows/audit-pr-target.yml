name: CI Audits (trusted runner for PRs)

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
  # allow manual dispatch so maintainers can run audits against a PR safely
  workflow_dispatch:
    inputs:
      pr:
        description: 'Pull request number to run audits for'
        required: true
        default: '2'

jobs:
  audits:
    name: Lighthouse & pa11y audits (trusted)
    # run with the base repository's code so we don't execute untrusted workflow from forks
    permissions:
      contents: read
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Checkout (base repository)
        uses: actions/checkout@v4

      - name: Fetch PR head contents (when manually dispatched)
        if: github.event_name == 'workflow_dispatch'
        run: |
          set -eux
          PR=${{ github.event.inputs.pr }}
          echo "Fetching PR #$PR info"
          HEAD_REPO=$(gh api repos/${{ github.repository }}/pulls/$PR --jq .head.repo.full_name)
          HEAD_REF=$(gh api repos/${{ github.repository }}/pulls/$PR --jq .head.ref)
          echo "Head repo: $HEAD_REPO, ref: $HEAD_REF"
          # Attempt to clone the specific branch directly to include branch history
          if git ls-remote --heads https://github.com/$HEAD_REPO $HEAD_REF | grep -q $HEAD_REF; then
            git clone --depth=1 --branch "$HEAD_REF" https://github.com/$HEAD_REPO pr_head
          else
            git clone --depth=1 https://github.com/$HEAD_REPO pr_head
            cd pr_head
            git fetch --depth=1 origin "$HEAD_REF" || true
            git checkout -B pr_head FETCH_HEAD || true
            cd ..
          fi
          # Copy files from PR into workspace root but exclude .git to avoid permission errors
          tar --exclude='.git' -C pr_head -cf - . | tar -C .. -xpf -
          rm -rf pr_head
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install global helpers
        run: |
          npm install -g http-server

      - name: Install Node dependencies (for image generation)
        run: |
          npm ci

      - name: Generate responsive image variants (CI)
        run: |
          node scripts/ci_generate_variants.js --input=reports_image_candidates_summary.json --out=tmp/generated-images || true
          if [ -d tmp/generated-images ]; then
            cp -v tmp/generated-images/* app/static/images/ || true
          fi

      - name: Start static server
        run: |
          mkdir -p reports_download
          if [ -f "certs/localhost.pem" ] && [ -f "certs/localhost-key.pem" ]; then
            echo "TRUSTED_CERTS=true" >> $GITHUB_ENV
            echo "Starting HTTPS server (trusted certs)"
            npx http-server -p 8443 -S --cert certs/localhost.pem --key certs/localhost-key.pem -c-1 > server.log 2>&1 &
          else
            echo "TRUSTED_CERTS=false" >> $GITHUB_ENV
            echo "Starting HTTP server (default for CI)"
            npx http-server -p 8000 -c-1 > server.log 2>&1 &
          fi
          sleep 5
          echo "--- server.log (first 200 lines) ---"
          if [ -f server.log ]; then
            sed -n '1,200p' server.log || true
          fi

      - name: Run Lighthouse (landing)
        run: |
          if [ "${TRUSTED_CERTS:-}" = "true" ] && curl -sS --head --insecure --max-time 2 https://localhost:8443 >/dev/null 2>&1; then
            BASE_URL="https://localhost:8443"
          else
            BASE_URL="http://localhost:8000"
          fi
          echo "Using BASE_URL=$BASE_URL"
          # compute chrome flags and include cert-ignore when running against trusted HTTPS
          CHROME_FLAGS="--no-sandbox --headless --disable-gpu"
          if [ "${TRUSTED_CERTS:-}" = "true" ]; then
            CHROME_FLAGS="$CHROME_FLAGS --ignore-certificate-errors"
          fi
          for attempt in 1 3; do
            echo "Lighthouse landing attempt $attempt"
            npx -y lighthouse "$BASE_URL/landing.html" \
              --output=json --output-path=reports_download/landing-lighthouse.report.json \
              --blocked-url-patterns='*gc.kis.v2.scr.kaspersky-labs.com*' \
              --chrome-flags="$CHROME_FLAGS" && break
            echo "Lighthouse attempt $attempt failed"
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done

      - name: Run Lighthouse (login)
        run: |
          if [ "${TRUSTED_CERTS:-}" = "true" ] && curl -sS --head --insecure --max-time 2 https://localhost:8443 >/dev/null 2>&1; then
            BASE_URL="https://localhost:8443"
          else
            BASE_URL="http://localhost:8000"
          fi
          echo "Using BASE_URL=$BASE_URL"
          CHROME_FLAGS="--no-sandbox --headless --disable-gpu"
          if [ "${TRUSTED_CERTS:-}" = "true" ]; then
            CHROME_FLAGS="$CHROME_FLAGS --ignore-certificate-errors"
          fi
          for attempt in 1 3; do
            echo "Lighthouse login attempt $attempt"
            npx -y lighthouse "$BASE_URL/app/templates/git-course/login.html" \
              --output=json --output-path=reports_download/login-lighthouse.report.json \
              --blocked-url-patterns='*gc.kis.v2.scr.kaspersky-labs.com*' \
              --chrome-flags="$CHROME_FLAGS" && break
            echo "Lighthouse login attempt $attempt failed"
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done

      - name: Run Lighthouse (prefacio)
        run: |
          if [ "${TRUSTED_CERTS:-}" = "true" ] && curl -sS --head --insecure --max-time 2 https://localhost:8443 >/dev/null 2>&1; then
            BASE_URL="https://localhost:8443"
          else
            BASE_URL="http://localhost:8000"
          fi
          echo "Using BASE_URL=$BASE_URL"
          CHROME_FLAGS="--no-sandbox --headless --disable-gpu"
          if [ "${TRUSTED_CERTS:-}" = "true" ]; then
            CHROME_FLAGS="$CHROME_FLAGS --ignore-certificate-errors"
          fi
          for attempt in 1 3; do
            echo "Lighthouse prefacio attempt $attempt"
            npx -y lighthouse "$BASE_URL/app/templates/git-course/1a-prefacio.html" \
              --output=json --output-path=reports_download/prefacio-lighthouse.report.json \
              --blocked-url-patterns='*gc.kis.v2.scr.kaspersky-labs.com*' \
              --chrome-flags="$CHROME_FLAGS" && break
            echo "Lighthouse prefacio attempt $attempt failed"
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done

      - name: Run pa11y (landing)
        run: |
          if [ "${TRUSTED_CERTS:-}" = "true" ] && curl -sS --head --insecure --max-time 2 https://localhost:8443 >/dev/null 2>&1; then
            BASE_URL="https://localhost:8443"
            IGNORE_CERTS=true
          else
            BASE_URL="http://localhost:8000"
            IGNORE_CERTS=false
          fi
          PA11Y_TMP=pa11y-ci.tmp.json
          # create a robust temporary pa11y config: ensure sandbox flags and optionally ignore certs
          node -e "const fs=require('fs'); const path=require('path'); const cfg=require('./pa11y-ci.config.json'); cfg.chromeLaunchConfig = cfg.chromeLaunchConfig || {}; cfg.chromeLaunchConfig.args = cfg.chromeLaunchConfig.args || []; const required=['--no-sandbox','--disable-setuid-sandbox','--disable-gpu']; required.forEach(a=>{ if(!cfg.chromeLaunchConfig.args.includes(a)) cfg.chromeLaunchConfig.args.push(a); }); if (process.env.TRUSTED_CERTS==='true'){ if(!cfg.chromeLaunchConfig.args.includes('--ignore-certificate-errors')) cfg.chromeLaunchConfig.args.push('--ignore-certificate-errors'); } fs.writeFileSync(path.join(process.cwd(), 'pa11y-ci.tmp.json'), JSON.stringify(cfg));"
          for attempt in 1 3; do
            echo "pa11y landing attempt $attempt"
            IGNORE_CERTS=${IGNORE_CERTS:-false} PA11Y_TMP=${PA11Y_TMP:-pa11y-ci.tmp.json} npx -y pa11y "$BASE_URL/landing.html" --config ${PA11Y_TMP} --reporter html > reports_download/landing-pa11y.html 2> reports_download/landing-pa11y.err && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done

      - name: Run pa11y (prefacio)
        run: |
          if [ "${TRUSTED_CERTS:-}" = "true" ] && curl -sS --head --insecure --max-time 2 https://localhost:8443 >/dev/null 2>&1; then
            BASE_URL="https://localhost:8443"
            IGNORE_CERTS=true
          else
            BASE_URL="http://localhost:8000"
            IGNORE_CERTS=false
          fi
          PA11Y_TMP=pa11y-ci.tmp.json
          node -e "const fs=require('fs'); const path=require('path'); const cfg=require('./pa11y-ci.config.json'); cfg.chromeLaunchConfig = cfg.chromeLaunchConfig || {}; cfg.chromeLaunchConfig.args = cfg.chromeLaunchConfig.args || []; const required=['--no-sandbox','--disable-setuid-sandbox','--disable-gpu']; required.forEach(a=>{ if(!cfg.chromeLaunchConfig.args.includes(a)) cfg.chromeLaunchConfig.args.push(a); }); if (process.env.TRUSTED_CERTS==='true'){ if(!cfg.chromeLaunchConfig.args.includes('--ignore-certificate-errors')) cfg.chromeLaunchConfig.args.push('--ignore-certificate-errors'); } fs.writeFileSync(path.join(process.cwd(), 'pa11y-ci.tmp.json'), JSON.stringify(cfg));"
          for attempt in 1 3; do
            echo "pa11y prefacio attempt $attempt"
            IGNORE_CERTS=${IGNORE_CERTS:-false} PA11Y_TMP=${PA11Y_TMP:-pa11y-ci.tmp.json} npx -y pa11y "$BASE_URL/app/templates/git-course/1a-prefacio.html" --config ${PA11Y_TMP} --reporter html > reports_download/prefacio-pa11y.html 2> reports_download/prefacio-pa11y.err && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done

      - name: Run pa11y (login)
        run: |
          if [ "${TRUSTED_CERTS:-}" = "true" ] && curl -sS --head --insecure --max-time 2 https://localhost:8443 >/dev/null 2>&1; then
            BASE_URL="https://localhost:8443"
            IGNORE_CERTS=true
          else
            BASE_URL="http://localhost:8000"
            IGNORE_CERTS=false
          fi
          PA11Y_TMP=pa11y-ci.tmp.json
          node -e "const fs=require('fs'); const path=require('path'); const cfg=require('./pa11y-ci.config.json'); cfg.chromeLaunchConfig = cfg.chromeLaunchConfig || {}; cfg.chromeLaunchConfig.args = cfg.chromeLaunchConfig.args || []; const required=['--no-sandbox','--disable-setuid-sandbox','--disable-gpu']; required.forEach(a=>{ if(!cfg.chromeLaunchConfig.args.includes(a)) cfg.chromeLaunchConfig.args.push(a); }); if (process.env.TRUSTED_CERTS==='true'){ if(!cfg.chromeLaunchConfig.args.includes('--ignore-certificate-errors')) cfg.chromeLaunchConfig.args.push('--ignore-certificate-errors'); } fs.writeFileSync(path.join(process.cwd(), 'pa11y-ci.tmp.json'), JSON.stringify(cfg));"
          for attempt in 1 3; do
            echo "pa11y login attempt $attempt"
            IGNORE_CERTS=${IGNORE_CERTS:-false} PA11Y_TMP=${PA11Y_TMP:-pa11y-ci.tmp.json} npx -y pa11y "$BASE_URL/app/templates/git-course/login.html" --config ${PA11Y_TMP} --reporter html > reports_download/login-pa11y.html 2> reports_download/login-pa11y.err && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done

      - name: Generate audit summary
        run: |
          node scripts/generate_audit_summary.js > reports_download/audit-summary.md || true

      - name: Upload audit artifacts
        uses: actions/upload-artifact@v4
        with:
          name: audit-reports
          path: reports_download/**

      - name: Post PR comment with audit summary (trusted runner)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        run: |
          node scripts/post_audit_comment.js --reports-dir=reports_download
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
