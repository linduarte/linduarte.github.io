name: Generate accessibility & performance reports

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches:
      - main
      - 'fix/*'

jobs:
  audit:
    name: Run pa11y & Lighthouse and upload reports
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    # (permissions are defined above)

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Start simple HTTP server
        run: |
          # start a simple server in background and redirect output to server.log
          python -m http.server 8000 > server.log 2>&1 &
          # wait for the server to be reachable (give it a few seconds)
          for i in 1 2 3 4 5; do
            if curl -sS -I http://localhost:8000/landing.html >/dev/null 2>&1; then
              echo "server up"; break
            else
              echo "waiting for server... ($i)"; sleep $((i*2))
            fi
          done
          echo "--- server.log (first 200 lines) ---"
          sed -n '1,200p' server.log || true

      # NOTE: temporary sanitization step that removed accidental '?=NUMBER' suffixes
      # was used during debugging. It has been removed now that the root cause is
      # being addressed; will be reintroduced only if CI artifacts show regressions.

      - name: Run pa11y reports
        run: |
          mkdir -p reports
          # capture both stdout (html) and stderr for debugging; keep job non-failing
          PA11Y_TMP=pa11y-ci.tmp.json
          node -e "const fs=require('fs'); const cfg=require('./pa11y-ci.config.json'); if (process.env.TRUSTED_CERTS==='true') cfg.chromeLaunchConfig.args.push('--ignore-certificate-errors'); fs.writeFileSync(process.cwd()+'/'+process.env.PA11Y_TMP, JSON.stringify(cfg));"
          for attempt in 1 3; do
            echo "pa11y landing attempt $attempt"
            npx -y pa11y "http://localhost:8000/landing.html" --config ${PA11Y_TMP} --reporter html > reports/landing-pa11y.html 2> reports/landing-pa11y.err && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done
          for attempt in 1 3; do
            echo "pa11y login attempt $attempt"
            npx -y pa11y "http://localhost:8000/app/templates/git-course/login.html" --config ${PA11Y_TMP} --reporter html > reports/login-pa11y.html 2> reports/login-pa11y.err && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done
          for attempt in 1 3; do
            echo "pa11y prefacio attempt $attempt"
            npx -y pa11y "http://localhost:8000/app/templates/git-course/1a-prefacio.html" --config ${PA11Y_TMP} --reporter html > reports/prefacio-pa11y.html 2> reports/prefacio-pa11y.err && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done
          # show small diagnostics to logs so that empty files are easier to debug in CI
          echo "Landing pa11y size:" && ls -l reports/landing-pa11y.* || true
          echo "Login pa11y size:" && ls -l reports/login-pa11y.* || true
          echo "Prefacio pa11y size:" && ls -l reports/prefacio-pa11y.* || true

      - name: Run Lighthouse (desktop)
        env:
          LH_HEADLESS_FLAGS: "--headless --no-sandbox --disable-gpu"
        run: |
          mkdir -p reports
          for attempt in 1 3; do
            echo "Lighthouse landing attempt $attempt"
            npx -y lighthouse "http://localhost:8000/landing.html" --chrome-flags="$LH_HEADLESS_FLAGS" --emulated-form-factor=desktop --throttling-method=provided --output=json --output-path=reports/landing-lighthouse.report.json && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done
          for attempt in 1 3; do
            echo "Lighthouse login attempt $attempt"
            npx -y lighthouse "http://localhost:8000/app/templates/git-course/login.html" --chrome-flags="$LH_HEADLESS_FLAGS" --emulated-form-factor=desktop --throttling-method=provided --output=json --output-path=reports/login-lighthouse.report.json && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done
          for attempt in 1 3; do
            echo "Lighthouse prefacio attempt $attempt"
            npx -y lighthouse "http://localhost:8000/app/templates/git-course/1a-prefacio.html" --chrome-flags="$LH_HEADLESS_FLAGS" --emulated-form-factor=desktop --throttling-method=provided --output=json --output-path=reports/prefacio-lighthouse.report.json && break || true
            if [ $attempt -lt 3 ]; then sleep $((attempt*5)); fi
          done

      - name: Upload reports as artifact
        uses: actions/upload-artifact@v4
        with:
          name: audit-reports
          path: reports/

      - name: Post audit summary to PR (when applicable)
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
        run: |
          node scripts/post_audit_comment.js --reports-dir=reports
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
