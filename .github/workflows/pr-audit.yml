name: PR audits — Lighthouse + pa11y

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      url:
        description: 'Optional URL to audit (overrides default Pages URL)'
        required: false
      perf_threshold:
        description: 'Performance threshold (0-100) to mark audit as passing'
        required: false
      acc_threshold:
        description: 'Accessibility threshold (0-100) to mark audit as passing'
        required: false
      pa11y_max_issues:
        description: 'Maximum allowed pa11y issues before failing the audit'
        required: false

permissions:
  contents: read
  pull-requests: write

jobs:
  audit:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Chromium
        run: |
          sudo apt-get update
          sudo apt-get install -y chromium-browser
          echo "CHROME_BIN=/usr/bin/chromium-browser" >> $GITHUB_ENV

      - name: Create reports dir
        run: mkdir -p reports

      - name: Set audit environment variables
        id: set-vars
        run: |
          node <<'NODE'
          const fs = require('fs');
          const evPath = process.env.GITHUB_EVENT_PATH;
          let inputs = {};
          try {
            if (evPath) {
              const ev = JSON.parse(fs.readFileSync(evPath, 'utf8')) || {};
              inputs = ev.inputs || ev.workflow_dispatch && ev.inputs || {};
            }
          } catch (e) {}

          const target = inputs.url || process.env.AUDIT_URL || 'https://linduarte.github.io';
          const perf = inputs.perf_threshold || process.env.PERF_THRESHOLD || '50';
          const acc = inputs.acc_threshold || process.env.ACC_THRESHOLD || '90';
          const pa = inputs.pa11y_max_issues || process.env.PA11Y_MAX_ISSUES || '5';

          const envLines = `TARGET_URL=${target}\nPERF_THRESHOLD=${perf}\nACC_THRESHOLD=${acc}\nPA11Y_MAX_ISSUES=${pa}\n`;
          fs.appendFileSync(process.env.GITHUB_ENV, envLines);
          console.log('Set TARGET_URL and thresholds in GITHUB_ENV');
          NODE

      - name: Run Lighthouse (JSON)
        run: |
          echo "Running Lighthouse (JSON) against: $PAGES_URL"
          npx -y lighthouse "$PAGES_URL" --chrome-flags="--headless --no-sandbox" --output=json --output-path=reports/lighthouse.json || true

      - name: Run Lighthouse (HTML)
        run: |
          echo "Running Lighthouse (HTML) against: $PAGES_URL"
          npx -y lighthouse "$PAGES_URL" --chrome-flags="--headless --no-sandbox" --output=html --output-path=reports/lighthouse.html || true

      - name: Run pa11y (JSON + HTML)
        run: |
          echo "Running pa11y against: $PAGES_URL"
          # Pass Chrome launcher options to disable sandboxing (required on GitHub runners)
          npx -y pa11y "$PAGES_URL" --chrome-launcher-options='{"args":["--no-sandbox","--disable-setuid-sandbox","--headless"]}' --reporter json > reports/pa11y.json || true
          npx -y pa11y "$PAGES_URL" --chrome-launcher-options='{"args":["--no-sandbox","--disable-setuid-sandbox","--headless"]}' --reporter html > reports/pa11y.html || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pr-audit-reports-${{ github.run_id }}
          path: reports/

      - name: Evaluate thresholds (fail if below)
        run: |
          node <<'NODE'
          const fs = require('fs');
          function warn(msg){ console.log('::warning::'+msg); }

          let lh = null;
          try { lh = JSON.parse(fs.readFileSync('reports/lighthouse.json','utf8')); } catch (e) { warn('Lighthouse JSON not available or unreadable'); }

          let pa = [];
          try { pa = JSON.parse(fs.readFileSync('reports/pa11y.json','utf8')) || []; } catch (e) { warn('pa11y JSON not available or unreadable'); }

          const getScore = (cat) => lh && lh.categories && lh.categories[cat] ? Math.round((lh.categories[cat].score||0)*100) : null;
          const perf = getScore('performance');
          const acc = getScore('accessibility');
          const paCount = Array.isArray(pa) ? pa.length : null;

          const perfThreshold = parseInt(process.env.PERF_THRESHOLD || '50', 10);
          const accThreshold = parseInt(process.env.ACC_THRESHOLD || '90', 10);
          const paMax = parseInt(process.env.PA11Y_MAX_ISSUES || '5', 10);

          let failed = false;
          let reasons = [];
          if (perf !== null && perf < perfThreshold) { failed = true; reasons.push(`Performance ${perf} < threshold ${perfThreshold}`); }
          if (acc !== null && acc < accThreshold) { failed = true; reasons.push(`Accessibility ${acc} < threshold ${accThreshold}`); }
          if (paCount !== null && paCount > paMax) { failed = true; reasons.push(`pa11y issues ${paCount} > allowed ${paMax}`); }

          if (failed) {
            console.error('Audit thresholds not met: '+reasons.join('; '));
            process.exit(1);
          } else {
            console.log('All audit thresholds met.');
          }
          NODE

      - name: Post PR comment with summary
        run: |
          node <<'NODE'
          const fs = require('fs');
          const cp = require('child_process');
          const runId = process.env.GITHUB_RUN_ID || 'unknown';
          const pagesUrl = process.env.TARGET_URL || 'https://linduarte.github.io';

          let lh = null; try { lh = JSON.parse(fs.readFileSync('reports/lighthouse.json','utf8')); } catch (e) {}
          let pa = []; try { pa = JSON.parse(fs.readFileSync('reports/pa11y.json','utf8')) || []; } catch (e) {}

          const score = (cat => lh && lh.categories && lh.categories[cat] ? Math.round((lh.categories[cat].score||0)*100) : 'n/a');
          const perf = score('performance'); const acc = score('accessibility');
          const bp = score('best-practices'); const seo = score('seo'); const pwa = score('pwa');

          const paIssues = Array.isArray(pa) ? pa.length : 'n/a';
          const topPa = Array.isArray(pa) && pa.length ? pa.slice(0,5).map(i=>`- ${i.message} (${i.selector||i.context||i.code||''})`).join('\n') : 'None';

          const perfThreshold = process.env.PERF_THRESHOLD || '50';
          const accThreshold = process.env.ACC_THRESHOLD || '90';
          const paMax = process.env.PA11Y_MAX_ISSUES || '5';

          const status = (perf !== 'n/a' && perf !== null && parseInt(perf)>=parseInt(perfThreshold) && acc !== 'n/a' && acc !== null && parseInt(acc)>=parseInt(accThreshold) && (paIssues==='n/a' || parseInt(paIssues) <= parseInt(paMax))) ? 'PASS' : 'FAIL';

          const body = `## Automated audit summary\n\n**Target URL:** ${pagesUrl}\n\n**Lighthouse**\n- Performance: ${perf} (threshold ${perfThreshold})\n- Accessibility: ${acc} (threshold ${accThreshold})\n- Best practices: ${bp}\n- SEO: ${seo}\n- PWA: ${pwa}\n\n**pa11y**\n- Issues found: ${paIssues} (allowed ${paMax})\n\nTop pa11y issues (up to 5):\n${topPa}\n\n**Audit result:** ${status}\n\nArtifacts (JSON/HTML) are attached to this workflow run as a single artifact named \`pr-audit-reports-${runId}\`.`;

          // Post the comment using gh if available and a pull_request number is present in the event
          try {
            const ev = process.env.GITHUB_EVENT_PATH ? JSON.parse(fs.readFileSync(process.env.GITHUB_EVENT_PATH, 'utf8')) : {};
            const prnum = ev.pull_request && ev.pull_request.number;
            if (prnum) {
              try {
                cp.execSync(`gh api repos/${process.env.GITHUB_REPOSITORY}/issues/${prnum}/comments -f body="${body.replace(/"/g,'\\\"')}"`, {stdio:'inherit'});
              } catch (e) {
                console.log('gh CLI not available or failed to post comment — skipping.');
              }
            } else {
              console.log('No pull request number in event payload; skipping comment.');
            }
          } catch (e) { console.log('Error preparing PR comment:', e.message); }
          NODE
