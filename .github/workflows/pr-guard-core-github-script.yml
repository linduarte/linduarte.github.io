name: Guard PRs for github-script & @actions/core

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  scan-pr-diff:
    runs-on: ubuntu-latest
    name: Scan PR diff for problematic patterns
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Compute changed files and scan
        id: scan
        run: |
          set -euo pipefail
          echo "Fetching base branch ${GITHUB_BASE_REF}..."
          git fetch origin ${GITHUB_BASE_REF}
          BASE=FETCH_HEAD
          # List changed files between base and head
          CHANGED_FILES=$(git diff --name-only $BASE...HEAD || true)
          echo "Changed files:" >&2
          echo "$CHANGED_FILES" >&2

          found=false
          matches=""
          for f in $CHANGED_FILES; do
            # Only scan text files that exist in the workspace
            if [ -f "$f" ]; then
              # Look at diff hunks to find introduced lines referencing problematic tokens
              git diff $BASE...HEAD -- "$f" | grep -nE "actions/github-script|require\('@actions/core'\)|const core = require\('@actions/core'\)" || true
              m=$(git diff $BASE...HEAD -- "$f" | grep -nE "actions/github-script|require\('@actions/core'\)|const core = require\('@actions/core'\)" || true)
              if [ -n "$m" ]; then
                found=true
                matches="$matches\n$f:\n$m\n"
              fi
            fi
          done

          if [ "$found" = true ]; then
            echo "Found problematic patterns in PR diff:" >&2
            echo -e "$matches" >&2
            echo "found=true" >> $GITHUB_OUTPUT
            echo "matches<<EOF" >> $GITHUB_OUTPUT
            echo -e "$matches" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "matches=" >> $GITHUB_OUTPUT
          fi

      - name: Fail for forks (can't auto-fix)
        if: steps.scan.outputs.found == 'true' && github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "This pull request introduces use of actions/github-script or requires '@actions/core' in the diff." >&2
          echo "For security and stability we block such changes. Please remove 'actions/github-script' or the 'require(\'@actions/core\')' from your workflow and use the checked-in node scripts instead." >&2
          echo "Matches:" >&2
          echo "${{ steps.scan.outputs.matches }}" >&2
          exit 1

      - name: Auto-fix same-repo PR (remove const core require)
        if: steps.scan.outputs.found == 'true' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: actions@github.com
        run: |
          set -euo pipefail
          echo "Attempting to auto-fix offending require lines in changed files for same-repo PR..."
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"

          # Replace occurrences of the exact require line in the files changed by the PR
          echo "Files to consider:"
          echo "$CHANGED_FILES"

          FIXED=false
          for f in $CHANGED_FILES; do
            if [ -f "$f" ]; then
              if git diff $BASE...HEAD -- "$f" | grep -q "const core = require('@actions/core')"; then
                echo "Removing 'const core = require('@actions/core')' from $f"
                # make a backup
                cp "$f" "$f.bak"
                # remove the offending line (only exact matches) and write back
                sed "/const core = require('@actions\/core')/d" "$f.bak" > "$f"
                git add "$f"
                FIXED=true
              fi
            fi
          done

          if [ "$FIXED" = true ]; then
            git commit -m "ci: remove duplicate require('@actions/core') introduced in PR (automated fix)" || true
            # push back to the branch (only works for same-repo PRs)
            git push origin HEAD:${{ github.head_ref }} || true
            echo "Auto-fix applied and pushed to branch ${GITHUB_HEAD_REF}."
          else
            echo "No auto-fixable require lines found. Please fix manually."
            echo "Matches:" >&2
            echo "${{ steps.scan.outputs.matches }}" >&2
            exit 1
          fi

      - name: Inform success
        run: |
          echo "Guard scan completed. No problematic patterns or auto-fix applied."
