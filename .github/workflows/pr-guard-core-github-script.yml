name: Guard PRs for github-script & @actions/core

on:
  pull_request:
    types: [opened, reopened, synchronize]

jobs:
  scan-pr-diff:
    runs-on: ubuntu-latest
    name: Scan PR diff for problematic patterns
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Compute changed files and scan
        id: scan
        run: |
          set -euo pipefail
          echo "Fetching base branch ${GITHUB_BASE_REF}..."
          git fetch origin ${GITHUB_BASE_REF}
          BASE=FETCH_HEAD
          # List changed files between base and head
          CHANGED_FILES=$(git diff --name-only $BASE...HEAD || true)
          echo "Changed files:" >&2
          echo "$CHANGED_FILES" >&2

          found=false
          matches=""
          for f in $CHANGED_FILES; do
            # Only scan text files that exist in the workspace
            if [ -f "$f" ]; then
              # Look at diff hunks to find introduced lines referencing problematic tokens
              # detect common patterns in the diff
              m=$(git diff $BASE...HEAD -- "$f" | grep -nE "actions/github-script|require\(['\"]@actions/core['\"]\)|require\(['\"]@actions/github['\"]\)|const[[:space:]]+core|let[[:space:]]+core|var[[:space:]]+core|\{[[:space:]]*core[[:space:]]*\}[[:space:]]*=|import[[:space:]]+.*from[[:space:]]+['\"]@actions/core['\"]" || true)
              if [ -n "$m" ]; then
                found=true
                matches="$matches\n$f:\n$m\n"
              fi
            fi
          done

          if [ "$found" = true ]; then
            echo "Found problematic patterns in PR diff:" >&2
            echo -e "$matches" >&2
            echo "found=true" >> $GITHUB_OUTPUT
            echo "matches<<EOF" >> $GITHUB_OUTPUT
            echo -e "$matches" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "matches=" >> $GITHUB_OUTPUT
          fi

      - name: Fail for forks (can't auto-fix)
        if: steps.scan.outputs.found == 'true' && github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "This pull request introduces use of actions/github-script or requires '@actions/core' in the diff." >&2
          echo "For security and stability we block such changes. Please remove 'actions/github-script' or the 'require(\'@actions/core\')' from your workflow and use the checked-in node scripts instead." >&2
          echo "Matches:" >&2
          echo "${{ steps.scan.outputs.matches }}" >&2
          exit 1

      - name: Auto-fix same-repo PR (generate proposed patch)
        if: steps.scan.outputs.found == 'true' && github.event.pull_request.head.repo.full_name == github.repository
        env:
          GIT_AUTHOR_NAME: github-actions
          GIT_AUTHOR_EMAIL: actions@github.com
        run: |
          set -euo pipefail
          echo "Attempting to auto-fix offending require lines in changed files for same-repo PR..."
          git config user.name "${GIT_AUTHOR_NAME}"
          git config user.email "${GIT_AUTHOR_EMAIL}"

          # Recompute base and changed files in this step (each step has a fresh shell)
          echo "Fetching base branch ${GITHUB_BASE_REF}..."
          git fetch origin ${GITHUB_BASE_REF}
          BASE=FETCH_HEAD
          CHANGED_FILES=$(git diff --name-only $BASE...HEAD || true)

          # Prepare a proposed patch file in reports/proposed.patch
          mkdir -p reports
          : > reports/proposed.patch

          echo "Files to consider:"
          echo "${CHANGED_FILES:-}"

          PROPOSED=false
          for f in $CHANGED_FILES; do
            if [ -f "$f" ]; then
              if git diff $BASE...HEAD -- "$f" | grep -q -E "require\(['\"]@actions/core['\"]\)|const[[:space:]]+core[[:space:]]*=|let[[:space:]]+core[[:space:]]*=|var[[:space:]]+core[[:space:]]*=|const[[:space:]]+\{[[:space:]]*core[[:space:]]*\}[[:space:]]*=|import[[:space:]]+.*core.*from[[:space:]]+['\"]@actions/core['\"]"; then
                echo "Building proposed patch for $f"
                cp "$f" "$f.bak"
                # create modified version without the problematic lines
                grep -v -E "@actions/core|\b(const|let|var)[[:space:]]+core\b" "$f.bak" > "$f.modified" || true
                # produce a unified diff between original and modified
                diff -u "$f.bak" "$f.modified" >> reports/proposed.patch || true
                rm -f "$f.modified"
                PROPOSED=true
              fi
            fi
          done

          if [ "$PROPOSED" = true ]; then
            echo "Proposed patch written to reports/proposed.patch"
            echo "(the workflow will post this as a PR comment for manual review)"
            echo "proposed_patch=reports/proposed.patch" >> $GITHUB_OUTPUT
          else
            echo "No auto-fixable require lines found. Please fix manually."
            echo "Matches:" >&2
            echo "${{ steps.scan.outputs.matches }}" >&2
            exit 1
          fi

      - name: Post proposed patch as PR comment
        if: steps.scan.outputs.found == 'true' && github.event.pull_request.head.repo.full_name == github.repository
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'reports/proposed.patch';
            let patch = '';
            try { patch = fs.readFileSync(path, 'utf8'); } catch (e) { patch = null }
            const pr = context.payload.pull_request && context.payload.pull_request.number;
            if (!pr) {
              core.info('No pull request found in context, skipping posting proposed patch.');
            } else if (!patch) {
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr, body: 'Guard scan detected problematic patterns but could not generate an automatic patch. Please fix the files manually.\n\nMatches:\n' + (steps.scan && steps.scan.outputs && steps.scan.outputs.matches ? steps.scan.outputs.matches : '') });
            } else {
              const body = 'Guard scan detected use of `@actions/core` or `actions/github-script` in the PR diff.\n\n' +
                'Suggested automated patch (apply locally if desired):\n\n' + '``diff\n' + patch + '\n```\n\n' +
                'If this change is acceptable, apply it locally and push, or reply to this comment to request an automated push.';
              await github.rest.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: pr, body });
            }

      - name: Inform success
        run: |
          echo "Guard scan completed. No problematic patterns or auto-fix applied."
